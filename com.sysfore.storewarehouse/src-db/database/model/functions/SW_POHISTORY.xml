<?xml version="1.0"?>
  <database name="FUNCTION SW_POHISTORY">
    <function name="SW_POHISTORY" type="VARCHAR">
      <parameter name="porder" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[poHistory RECORD;
BEGIN
FOR poHistory IN(SELECT C_ORDER.DOCUMENTNO,C_ORDER.C_ORDER_ID,C_ORDERLINE.C_ORDERLINE_ID,C_ORDER.AD_CLIENT_ID, C_ORDER.AD_ORG_ID, C_ORDER.CREATED,
C_ORDER.CREATEDBY, C_ORDER.UPDATED, C_ORDER.UPDATEDBY, C_ORDERLINE.M_PRODUCT_ID, C_ORDERLINE.EM_SW_ITEMCODE, C_ORDERLINE.QTYORDERED FROM C_ORDER,
C_ORDERLINE WHERE C_ORDERLINE.C_ORDER_ID = C_ORDER.C_ORDER_ID AND C_ORDER.C_ORDER_ID=porder)
LOOP
INSERT INTO SW_POHISTORY(SW_POHISTORY_ID,C_ORDER_ID,C_ORDERLINE_ID,
AD_CLIENT_ID,AD_ORG_ID,CREATED,CREATEDBY,UPDATED,UPDATEDBY,
M_PRODUCT_ID,ITEMCODE,QTYORDERED,DOCUMENTNO)
VALUES(get_UUID(),poHistory.C_ORDER_ID,poHistory.C_ORDERLINE_ID,
poHistory.AD_CLIENT_ID, poHistory.AD_ORG_ID, poHistory.CREATED,
poHistory.CREATEDBY, poHistory.UPDATED, poHistory.UPDATEDBY,
 poHistory.M_PRODUCT_ID, poHistory.EM_SW_ITEMCODE, poHistory.QTYORDERED,poHistory.DOCUMENTNO);
END LOOP;
RETURN 'SUCCESS';
END SW_POHISTORY
]]></body>
    </function>
  </database>
