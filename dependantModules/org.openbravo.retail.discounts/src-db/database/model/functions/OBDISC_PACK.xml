<?xml version="1.0"?>
  <database name="FUNCTION OBDISC_PACK">
    <function name="OBDISC_PACK" type="VARCHAR">
      <parameter name="p_type" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_rule_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_line_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_priceprecision" type="NUMERIC" mode="in">
        <default/>
      </parameter>
      <parameter name="p_stdprecision" type="NUMERIC" mode="in">
        <default/>
      </parameter>
      <parameter name="p_user_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_taxincluded" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[/************************************************************************************
 * Copyright (C) 2012 Openbravo S.L.U.
 * Licensed under the Openbravo Commercial License version 1.0
 * You may obtain a copy of the License at http://www.openbravo.com/legal/obcl.html
 * or in the legal folder of this module distribution.
 ************************************************************************************/
  v_docId VARCHAR(32);
  v_x NUMBER;
  v_y NUMBER;
  v_chunks NUMBER;
  v_product VARCHAR(32);
  v_totalAmt NUMBER;
  v_promotionAmt NUMBER;
  v_grossAmt NUMBER;
  v_previousDiscount NUMBER;

  TYPE RECORD IS REF CURSOR;
  Cur_Order RECORD;

  v_tax VARCHAR(32);
  v_qty NUMBER;
  v_unitPrice NUMBER;
  v_newUnitPrice NUMBER;
  v_newGrossAmt NUMBER;
  v_newNetAmt NUMBER;
  v_newNetPrice NUMBER;
  v_priceactual NUMBER;
  v_basePrice NUMBER;
  v_netAmt NUMBER;
  v_totalPromotion NUMBER;
  v_displayedPromotion NUMBER;
  v_price NUMBER;
  v_outOfCombo NUMBER;

  kk VARCHAR(60);
BEGIN
  select em_obdisc_price
    into v_price
    from m_offer
   where m_offer_id = p_rule_id;
   
  if (p_type ='O') then
		select gross_unit_price, c_tax_id, qtyordered,
					 c_order_id, m_product_id, line_gross_amount, priceactual, linenetamt
			into v_unitprice, v_tax, v_qty,
					 v_docId, v_product, v_grossAmt, v_priceactual, v_netAmt
			from c_orderline
		 where c_orderline_id = p_line_id;

		 select count(*)
       into v_x
      from c_orderline ol
     where c_orderline_id != p_line_id
       and c_order_id = v_docId
       and m_product_id = v_product
       and exists (select 1 
                     from c_orderline_offer o
                    where o.c_orderline_id = ol.c_orderline_id
                     and m_offer_id = p_rule_id);
       if v_x > 0 then
         -- this line is alredy taking part in another pack
         return 'Y';
        end if; 

		 -- check if products in order are all the ones in the the rule
		 select count(distinct ol.m_product_id)
			 into v_x
			 from c_orderline ol, m_offer_product op
			where c_order_id = v_docId
				and op.m_product_id = ol.m_product_id
        and op.m_offer_id = p_rule_id;

		 select min(floor(ol.qtyordered / coalesce(op.em_obdisc_qty, 1)))
			 into v_chunks
			 from c_orderline ol, m_offer_product op
			where c_order_id = v_docId
				and op.m_product_id = ol.m_product_id
				and op.m_offer_id = p_rule_id;		
  else
		select gross_unit_price, c_tax_id, qtyinvoiced,
					 c_invoice_id, m_product_id, line_gross_amount, priceactual, linenetamt
			into v_unitprice, v_tax, v_qty,
					 v_docId, v_product, v_grossAmt, v_priceactual, v_netAmt
			from c_invoiceline
		 where c_invoiceline_id = p_line_id;


		 select count(*)
       into v_x
      from c_invoiceline ol
     where c_invoiceline_id != p_line_id
       and c_invoice_id = v_docId
       and m_product_id = v_product
       and exists (select 1 
                     from c_invoiceline_offer o
                    where o.c_invoiceline_id = ol.c_invoiceline_id
                     and m_offer_id = p_rule_id);
       if v_x > 0 then
         -- this line is alredy taking part in another pack
         return 'Y';
        end if; 

		 -- check if products in invoices are all the ones in the the rule
		 select count(distinct ol.m_product_id)
			 into v_x
			 from c_invoiceline ol, m_offer_product op
			where ol.c_invoice_id = v_docId
				and op.m_product_id = ol.m_product_id
        and op.m_offer_id = p_rule_id;

		 select min(floor(ol.qtyinvoiced / coalesce(op.em_obdisc_qty, 1)))
			 into v_chunks
			 from c_invoiceline ol, m_offer_product op
			where c_invoice_id = v_docId
				and op.m_product_id = ol.m_product_id
				and op.m_offer_id = p_rule_id;				
  end if;
   select count(*)
     into v_y
     from m_offer_product
    where m_offer_id = p_rule_id;

    if (v_x != v_y) then
      return 'Y'; 
    end if;

    if (v_chunks = 0) then
      return 'Y'; 
    end if;

	 v_totalAmt := 0;
	 v_promotionAmt := 0;
	 v_outOfCombo := 0;
     
	 for Cur_Order in (select ol.c_orderline_id as id, ol.qtyordered as qty, ol.gross_unit_price, op.em_obdisc_qty, 
														ol.priceactual, ol.line
											 from c_orderline ol, m_offer_product op
											where ol.c_order_id = v_docId
												and op.m_product_id = ol.m_product_id
												and op.m_offer_id = p_rule_id
												and p_type = 'O'
												and ol.c_orderline_id = (select c_orderline_id
												                           from c_orderline l
												                          where l.m_product_id = ol.m_product_id
												                            and l.c_order_id = v_docId
												                            and (select count(*) 
												                                       from c_orderline_offer 
												                                      where c_orderline_id = l.c_orderline_id
												                                        and m_offer_id = p_rule_id) * 10000 - l.line = 
												                                        (select max((select count(*)  * 10000 - oo.line
												                                       from c_orderline_offer 
												                                      where c_orderline_id = oo.c_orderline_id
												                                        and m_offer_id = p_rule_id))
												                           from c_orderline oo 
												                          where oo.m_product_id = ol.m_product_id
												                            and oo.c_order_id = v_docId
                                                    and not exists (select 1 
                                                                      from c_orderline_offer 
                                                                     where c_orderline_id = oo.c_orderline_id 
                                                                       and m_offer_id != p_rule_id)))										                                          
											union
										 select ol.c_invoiceline_id as id, ol.qtyinvoiced as qty, ol.gross_unit_price, op.em_obdisc_qty, 
														ol.priceactual, ol.line
											 from c_invoiceline ol, m_offer_product op
											where ol.c_invoice_id = v_docId
												and op.m_product_id = ol.m_product_id
												and op.m_offer_id = p_rule_id
												and p_type = 'I'
                        and ol.c_invoiceline_id = (select c_invoiceline_id
												                           from c_invoiceline l
												                          where l.m_product_id = ol.m_product_id
												                            and l.c_invoice_id = v_docId
												                            and (select count(*) 
												                                       from c_invoiceline_offer 
												                                      where c_invoiceline_id = l.c_invoiceline_id
												                                        and m_offer_id = p_rule_id) * 10000 - l.line = 
												                                        (select max((select count(*)  * 10000 - oo.line
												                                       from c_invoiceline_offer 
												                                      where c_invoiceline_id = oo.c_invoiceline_id
												                                        and m_offer_id = p_rule_id))
												                           from c_invoiceline oo 
												                          where oo.m_product_id = ol.m_product_id
												                            and oo.c_invoice_id = v_docId
                                                    and not exists (select 1 
                                                                      from c_invoiceline_offer 
                                                                     where c_invoiceline_id = oo.c_invoiceline_id 
                                                                       and m_offer_id != p_rule_id)))	

) loop

												select name into kk from m_offer where m_offer_id = p_rule_id;

			-- If this is not the first line  this same discount is applied, it is needed to revert previous
			-- lines to calculate totals
		 if (p_type = 'O') then
			 select coalesce(sum(amtoffer), 0)
				 into v_previousDiscount
				 from c_orderline_offer
				where c_orderline_id = Cur_Order.id
					and m_offer_id = p_rule_id;
		 else
			 select coalesce(sum(amtoffer), 0)
				 into v_previousDiscount
				 from c_invoiceline_offer
				where c_invoiceline_id = Cur_Order.id
					and m_offer_id = p_rule_id;
		 end if;

		 if (p_taxIncluded = 'Y') then  
			 v_totalAmt := v_totalAmt + Cur_Order.qty * (Cur_Order.gross_unit_price + v_previousDiscount);
			 v_outOfCombo := v_outOfCombo + ((Cur_Order.qty - (v_chunks * Cur_Order.em_obdisc_qty)) * (Cur_Order.gross_unit_price + v_previousDiscount));
		 else
			 v_totalAmt := v_totalAmt + Cur_Order.qty * (Cur_Order.priceactual + v_previousDiscount);
			 v_outOfCombo := v_outOfCombo + ((Cur_Order.qty - (v_chunks * Cur_Order.em_obdisc_qty)) * (Cur_Order.priceactual + v_previousDiscount));
		 end if;
	 end loop;

   v_promotionAmt :=  v_totalAmt - (v_chunks * v_price) - v_outOfCombo;
	 if (p_taxIncluded = 'Y') then
		 v_newGrossAmt := round(v_grossAmt * (1 - v_promotionAmt / v_totalAmt), p_priceprecision);
		 v_newUnitPrice := round(v_newGrossAmt / v_qty, p_priceprecision);
		 v_newNetPrice := c_get_net_price_from_gross(v_tax, v_newGrossAmt, v_newGrossAmt, p_priceprecision, v_qty);
		 v_newNetAmt := c_get_net_price_from_gross(v_tax, v_newGrossAmt,v_newGrossAmt, p_priceprecision, 1);
		 v_basePrice := v_unitprice;
		 v_totalPromotion := v_grossAmt - v_newGrossAmt;
	 else
		 v_newNetAmt := round(v_netAmt * (1 - v_promotionAmt / v_totalAmt), p_priceprecision);
		 v_newNetPrice := round(v_newNetAmt / v_qty, p_priceprecision);
		 v_basePrice := v_priceactual;
		 v_totalPromotion := v_netAmt - v_newNetAmt;
	 end if;

   M_PROMOTION_ADD(p_type, p_line_id, p_rule_id, p_taxIncluded, v_newUnitPrice, v_newGrossAmt, v_newNetPrice, v_newNetAmt, v_totalPromotion, v_totalPromotion, v_basePrice, p_user_id);

select line into v_x from c_orderline where c_orderline_id = p_line_id;
   return 'N';
END OBDISC_PACK
]]></body>
    </function>
  </database>
